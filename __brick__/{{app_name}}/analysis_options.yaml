#include: package:flutter_lints/flutter.yaml
include: package:very_good_analysis/analysis_options.yaml

analyzer:
  errors:
    avoid_dynamic_calls: error
    missing_required_param: error
    missing_return: error
    # allow having TODOs in the code
    todo: info
    missing_enum_constant_in_switch: error
    invalid_use_of_protected_member: error
    unused_local_variable: warning
    deprecated_member_use: warning
    unused_element: warning
    unused_field: warning
    dead_code: error
    must_call_super: error

    # linter errors
    unnecessary_statements: error
    recursive_getters: error
    unnecessary_new: error
    unnecessary_getters_setters: error
    use_function_type_syntax_for_parameters: error
    no_duplicate_case_values: error
    no_adjacent_strings_in_list: error
    non_constant_identifier_names: error
    constant_identifier_names: error
    avoid_returning_this: error
    prefer_const_constructors_in_immutables: error
    prefer_const_literals_to_create_immutables: error
    avoid_equals_and_hash_code_on_mutable_classes: error
    camel_case_types: error
    camel_case_extensions: error
    library_names: error
    file_names: error
    library_prefixes: error

    # linter warnings
    avoid_print: warning
    unnecessary_lambdas: warning
    use_key_in_widget_constructors: warning
    prefer_final_fields: warning
    prefer_final_locals: warning
    prefer_final_in_for_each: warning
    prefer_const_constructors: warning
    unnecessary_const: warning
    unnecessary_brace_in_string_interps: warning

    # linter ignores
    lines_longer_than_80_chars: ignore
    always_use_package_imports: ignore
    avoid_setters_without_getters: ignore
    sort_constructors_first: ignore
    public_member_api_docs: ignore

    # Ignore analyzer hints for updating pubspecs when using Future or
    # Stream and not importing dart:async
    # Please see https://github.com/flutter/flutter/pull/24528 for details.
    sdk_version_async_exported_from_core: ignore
  exclude:
    - "bin/cache/**"
    - "**/*.chopper.dart"
    - "**/generated/**"
    - "**/*.g.dart"
  language:
    strict-casts: true
    strict-raw-types: true

linter:
  rules:
    # these rules are documented on and in the same order as
    # the Dart Lint rules page to make maintenance easier
    # https://github.com/dart-lang/linter/blob/master/example/all.yaml
    - always_declare_return_types
    # always_put_control_body_on_new_line
    - always_put_required_named_parameters_first
    - always_require_non_null_named_parameters
    - avoid_dynamic_calls
#    - always_specify_types
    - annotate_overrides
    - avoid_print
    # - avoid_annotating_with_dynamic # conflicts with always_specify_types
    - avoid_returning_this
    - avoid_init_to_null
    - avoid_bool_literals_in_conditional_expressions
    # - avoid_catches_without_on_clauses # we do this commonly
    # - avoid_catching_errors # we do this commonly
    #    - avoid_classes_with_only_static_members
    # - avoid_double_and_int_checks # only useful when targeting JS runtime
    - avoid_empty_else
    - avoid_field_initializers_in_const_classes
    - avoid_function_literals_in_foreach_calls
    # - avoid_js_rounded_ints # only useful when targeting JS runtime
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    # - avoid_private_typedef_functions # we prefer having typedef (discussion in https://github.com/flutter/flutter/pull/16356)
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null # there are plenty of valid reasons to return null
    - avoid_returning_null_for_future # not yet tested
    - avoid_returning_null_for_void
    # - avoid_returning_this # there are plenty of valid reasons to return this
    # - avoid_setters_without_getters # not yet tested
    - avoid_shadowing_type_parameters # not yet tested
    # - avoid_single_cascade_in_expression_statements # not yet tested
    - avoid_slow_async_io
    - avoid_types_as_parameter_names
    - avoid_types_on_closure_parameters # conflicts with always_specify_types
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions
    - cascade_invocations # not yet tested
    # - close_sinks # not reliable enough
    # - comment_references # blocked on https://github.com/flutter/flutter/issues/20765
    # - constant_identifier_names # needs an opt-out https://github.com/dart-lang/linter/issues/204
    - control_flow_in_finally
    # - curly_braces_in_flow_control_structures # not yet tested
    # - diagnostic_describe_all_properties # not yet tested
    - depend_on_referenced_packages
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    # - file_names # not yet tested
    - hash_and_equals
    - implementation_imports
    # - invariant_booleans # too many false positives: https://github.com/dart-lang/linter/issues/811
    - collection_methods_unrelated_type
    # - join_return_with_assignment # not yet tested
    - library_names
    - library_prefixes
    # - lines_longer_than_80_chars # not yet tested
    # - literal_only_boolean_expressions # too many false positives: https://github.com/dart-lang/sdk/issues/34181
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - non_constant_identifier_names
    # - null_closures  # not yet tested
    # - omit_local_variable_types # opposite of always_specify_types
    # - one_member_abstracts # too many false positives
    # - only_throw_errors # https://github.com/flutter/flutter/issues/5792
    - overridden_fields
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    # - parameter_assignments # we do this commonly
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    # - prefer_asserts_with_message # not yet tested
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    # - prefer_double_quotes # opposite of prefer_single_quotes
    # - prefer_expression_function_bodies # conflicts with https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#consider-using--for-short-functions-and-methods
    - prefer_final_fields
    # - prefer_final_in_for_each # not yet tested
    - prefer_final_locals
    # - prefer_for_elements_to_map_fromIterable # not yet tested
    - prefer_foreach
    # - prefer_function_declarations_over_variables # not yet tested
    - prefer_generic_function_type_aliases
    # - prefer_if_elements_to_conditional_expressions # not yet tested
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    # - prefer_int_literals # not yet tested
    # - prefer_interpolation_to_compose_strings # not yet tested
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_iterable_whereType
    # - prefer_mixin # https://github.com/dart-lang/language/issues/32
    # - prefer_null_aware_operators # disable until NNBD, see https://github.com/flutter/flutter/pull/32711#issuecomment-492930932
    - prefer_relative_imports
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    # - provide_deprecation_message # not yet tested
    # - public_member_api_docs # enabled on a case-by-case basis; see e.g. packages/analysis_options.yaml
    - recursive_getters
    - slash_for_doc_comments
    - sort_child_properties_last # not yet tested
    # - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    # - type_annotate_public_apis # subset of always_specify_types
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return # not yet tested
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_getters_setters
    # - unnecessary_lambdas # has false positives: https://github.com/dart-lang/linter/issues/498
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_this
    - unrelated_type_equality_checks
    - unsafe_html # not yet tested
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters # not yet tested
    - use_rethrow_when_possible
    - use_key_in_widget_constructors
    - use_setters_to_change_properties # not yet tested
    # - use_string_buffers # has false positives: https://github.com/dart-lang/sdk/issues/34182
    # - use_to_and_as_if_applicable # has false positives, so we prefer to catch this by code-review
    - valid_regexps
    - void_checks # not yet tested






#analyzer:
#  language:
#    strict-casts: true
#    strict-inference: true
#    strict-raw-types: true
#
#  errors:
#    close_sinks: ignore
#    missing_required_param: error
#    missing_return: error
#    record_literal_one_positional_no_trailing_comma: error
#    collection_methods_unrelated_type: warning
#    unrelated_type_equality_checks: warning
#
#  exclude:
#    - test/.test_coverage.dart
#    - lib/generated_plugin_registrant.dart
#
#linter:
#  rules:
#    - always_declare_return_types
#    - always_put_required_named_parameters_first
#    - always_use_package_imports
#    - annotate_overrides
#    - avoid_bool_literals_in_conditional_expressions
#    - avoid_catching_errors
#    - avoid_double_and_int_checks
#    - avoid_dynamic_calls
#    - avoid_empty_else
#    - avoid_equals_and_hash_code_on_mutable_classes
#    - avoid_escaping_inner_quotes
#    - avoid_field_initializers_in_const_classes
#    - avoid_final_parameters
#    - avoid_function_literals_in_foreach_calls
#    - avoid_init_to_null
#    - avoid_js_rounded_ints
#    - avoid_multiple_declarations_per_line
#    - avoid_null_checks_in_equality_operators
#    - avoid_positional_boolean_parameters
#    - avoid_print
#    - avoid_private_typedef_functions
#    - avoid_redundant_argument_values
#    - avoid_relative_lib_imports
#    - avoid_renaming_method_parameters
#    - avoid_return_types_on_setters
#    - avoid_returning_null_for_void
#    - avoid_returning_this
#    - avoid_setters_without_getters
#    - avoid_shadowing_type_parameters
#    - avoid_single_cascade_in_expression_statements
#    - avoid_slow_async_io
#    - avoid_type_to_string
#    - avoid_types_as_parameter_names
#    - avoid_unnecessary_containers
#    - avoid_unused_constructor_parameters
#    - avoid_void_async
#    - avoid_web_libraries_in_flutter
#    - await_only_futures
#    - camel_case_extensions
#    - camel_case_types
#    - cancel_subscriptions
#    - cascade_invocations
#    - cast_nullable_to_non_nullable
#    - collection_methods_unrelated_type
#    - combinators_ordering
#    - comment_references
#    - conditional_uri_does_not_exist
#    - constant_identifier_names
#    - control_flow_in_finally
#    - curly_braces_in_flow_control_structures
#    - dangling_library_doc_comments
#    - depend_on_referenced_packages
#    - deprecated_consistency
#    - directives_ordering
#    - empty_catches
#    - empty_constructor_bodies
#    - empty_statements
#    - eol_at_end_of_file
#    - exhaustive_cases
#    - file_names
#    - flutter_style_todos
#    - hash_and_equals
#    - implicit_call_tearoffs
#    - implementation_imports
#    - implicit_reopen
#    - invalid_case_patterns
#    - join_return_with_assignment
#    - leading_newlines_in_multiline_strings
#    - library_annotations
#    - library_names
#    - library_prefixes
#    - library_private_types_in_public_api
#    - lines_longer_than_80_chars
#    - literal_only_boolean_expressions
#    - missing_whitespace_between_adjacent_strings
#    - no_adjacent_strings_in_list
#    - no_default_cases
#    - no_duplicate_case_values
#    - no_leading_underscores_for_library_prefixes
#    - no_leading_underscores_for_local_identifiers
#    - no_logic_in_create_state
#    - no_runtimeType_toString
#    - non_constant_identifier_names
#    - noop_primitive_operations
#    - null_check_on_nullable_type_parameter
#    - null_closures
#    - omit_local_variable_types
#    - one_member_abstracts
#    - only_throw_errors
#    - overridden_fields
#    - package_api_docs
#    - package_names
#    - package_prefixed_library_names
#    - parameter_assignments
#    - prefer_adjacent_string_concatenation
#    - prefer_asserts_in_initializer_lists
#    - prefer_asserts_with_message
#    - prefer_collection_literals
#    - prefer_conditional_assignment
#    - prefer_const_constructors
#    - prefer_const_constructors_in_immutables
#    - prefer_const_declarations
#    - prefer_const_literals_to_create_immutables
#    - prefer_constructors_over_static_methods
#    - prefer_contains
#    - prefer_final_fields
#    - prefer_final_in_for_each
#    - prefer_final_locals
#    - prefer_for_elements_to_map_fromIterable
#    - prefer_function_declarations_over_variables
#    - prefer_generic_function_type_aliases
#    - prefer_if_elements_to_conditional_expressions
#    - prefer_if_null_operators
#    - prefer_initializing_formals
#    - prefer_inlined_adds
#    - prefer_int_literals
#    - prefer_interpolation_to_compose_strings
#    - prefer_is_empty
#    - prefer_is_not_empty
#    - prefer_is_not_operator
#    - prefer_iterable_whereType
#    - prefer_null_aware_method_calls
#    - prefer_null_aware_operators
#    - prefer_single_quotes
#    - prefer_spread_collections
#    - prefer_typing_uninitialized_variables
#    - prefer_void_to_null
#    - provide_deprecation_message
#    - public_member_api_docs
#    - recursive_getters
#    - require_trailing_commas
#    - secure_pubspec_urls
#    - sized_box_for_whitespace
#    - sized_box_shrink_expand
#    - slash_for_doc_comments
#    - sort_child_properties_last
#    - sort_constructors_first
#    - sort_pub_dependencies
#    - sort_unnamed_constructors_first
#    - test_types_in_equals
#    - throw_in_finally
#    - tighten_type_of_initializing_formals
#    - type_annotate_public_apis
#    - type_init_formals
#    - unawaited_futures
#    - unnecessary_await_in_return
#    - unnecessary_breaks
#    - unnecessary_brace_in_string_interps
#    - unnecessary_const
#    - unnecessary_constructor_name
#    - unnecessary_getters_setters
#    - unnecessary_lambdas
#    - unnecessary_late
#    - unnecessary_library_directive
#    - unnecessary_new
#    - unnecessary_null_aware_assignments
#    - unnecessary_null_checks
#    - unnecessary_null_in_if_null_operators
#    - unnecessary_nullable_for_final_variable_declarations
#    - unnecessary_overrides
#    - unnecessary_parenthesis
#    - unnecessary_raw_strings
#    - unnecessary_statements
#    - unnecessary_string_escapes
#    - unnecessary_string_interpolations
#    - unnecessary_this
#    - unnecessary_to_list_in_spreads
#    - unrelated_type_equality_checks
#    - use_build_context_synchronously
#    - use_colored_box
#    - use_enums
#    - use_full_hex_values_for_flutter_colors
#    - use_function_type_syntax_for_parameters
#    - use_if_null_to_convert_nulls_to_bools
#    - use_is_even_rather_than_modulo
#    - use_key_in_widget_constructors
#    - use_late_for_private_fields_and_variables
#    - use_named_constants
#    - use_raw_strings
#    - use_rethrow_when_possible
#    - use_setters_to_change_properties
#    - use_string_buffers
#    - use_string_in_part_of_directives
#    - use_super_parameters
#    - use_test_throws_matchers
#    - use_to_and_as_if_applicable
#    - valid_regexps
#    - void_checks